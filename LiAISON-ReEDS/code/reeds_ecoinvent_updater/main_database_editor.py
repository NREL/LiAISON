import secrets
import time
from reeds_ecoinvent_updater.lci_creator import reeds_db_editor
from reeds_ecoinvent_updater.lci_modifier import reeds_lci_modifier
from premise import *
from premise_gwp import add_premise_gwp


def reset_project(base_database,base_project,project_new,bw):
    
    """
    This function copies the project directory of a certain year and scenario, for example
    ecoinvent RCP 19 2030 and creates a copy of the project using a non repeatable name
    using 


    Parameters
    ----------
    db: str
        database name for scenario and year
    
    number : str
        random number generated by uuid to create no duplicate databases
    
    project : str 
        generic project name
        
    bw : module
        brightway2 module loaded shortcut name
        

    
    Returns
    -------
    project name : str
        Name of the project
    """

    project_name = project_new
    try:
      bw.projects.delete_project(project_name,delete_dir = True)
      print('Project deleted',flush=True)
    except:
      print('Project does not exist',flush=True)
      pass
    bw.projects.set_current(base_project)
    try:
        bw.projects.copy_project(project_name,switch = False)
        print(base_project+'_project copied successfully',flush=True)
    except:
        bw.projects.purge_deleted_directories()
        bw.projects.copy_project(project_name,switch = False)
        print(base_project+'_project copied successfully after directory deleted',flush=True)    
    

    bw.projects.set_current(project_name)
    print("Entered project " + project_name,flush = True)
    print("Databases in this project are",flush = True)
    print(bw.databases,flush = True) 

def editor(updated_database,base_database,base_project,updated_project_name,bw):
    #Main editor functions that actually calls the functions for reading IMAGE files,
    #IMAGE DATA from posterity and updating the ecoinvent databases. 
    #it stores the updated databases in dictionary files
 
        reset_project(base_database,base_project,updated_project_name,bw)   

        time0 = time.time()
        key = updated_database
        year = updated_database[10:14]
        version = base_database[9:]          
       
        
        time1 = time.time()
        ndb = NewDatabase(
            scenarios=[
                {"model":"image", "pathway":"SSP2-Base", "year":2020}
            ],
            source_db=base_database, # <-- name of the database in the BW2 project. Must be a string.
            source_version=version, # <-- version of ecoinvent. Can be "3.5", "3.6", "3.7" or "3.7.1". Must be a string.
            key='tUePmX_S5B8ieZkkM7WUU2CnO8SmShwmAeWK9x2rTFo=' # <-- decryption key
            # to be requested from the library maintainers if you want ot use default scenarios included in `premise`
        )
        print(time.time() - time1, flush = True)
        print('new database created, updating now', flush = True)

        time1 = time.time()
        ndb.update_all()
        
        print("updated with SSP2-Base" + str(2020), flush = True)
        print(time.time() - time1, flush = True)

        time1 = time.time()
        add_premise_gwp()
        print('Writing to brightway', flush = True)
        ndb.write_db_to_brightway(name=[key])
        print('Sucessfully written database '+ key, flush = True) 
        print(time.time() - time1, flush=True)

            
        print(time.time() - time0)
        print("seconds", flush = True)



def reeds_updater(process_name_bridge,emission_name_bridge,location_name_bridge,initial_year,results_filename,lca_activity_modification,create_new_database,data_dir,inventory_filename,modification_inventory_filename,premise_editor,base_database,base_project,database_new,project_new,bw):

    """
    This function defines the result arrays and then calls monte carlo analysis if required or just runs the 
    LCIA run once for analysis. 


    Parameters
    ----------
    project: str
        project name as provided by user        
    
    results_filename : str
        filename for the result         

    lca_flag : boolean 
        boolean for Life cycle analysis to operate
        
    primary_process : str
       the process under LCA study  

    location_under_study : str
        location of the process under stidy

    eco_d : str
       database name for scenario and year
        
    mc_runs : int
       number of monte carlo runs       
        
    inventory_filename : str
        filename for the process foreground inventory  

    modification_inventory_filename: str
        filename for the process inventory that will be modified inside ecoinvent      
    output_dir : str
       output directory for saving results       
    
    bw: module
       brightway2 module

    Returns
    -------
    None
    """
    

    

    #'remove all uncertainty from the background with this command'
    #remove_background_uncertainty(db) 
    def reeds_editor(db_new,r,run_filename,project_new,create_new_database):

            """
            This function defines the result arrays and then calls monte carlo analysis if required or just runs the 
            LCIA run once for analysis. 
    
    
            Parameters
            ----------
            db : 
                ecoinvent database name under study with scenario and year        
            
            r : str
                blank for normal runs or numerical for monte carlo simulation number          
    
            Returns
            -------
            None
            """
            print(project_new," Project entered for ReEDS LCI development",flush=True)
            print('\n')
            print(database_new,flush=True)
            print("Staring editing LCI using ReEDS", flush=True)
            print('\n')
            
            reset_project(base_database,base_project,project_new,bw)
            
            reeds_db_editor(db_new,run_filename,process_name_bridge,emission_name_bridge,location_name_bridge,bw)                   
            print('ReEDS LCI electricity generation created within ecoinvent',flush=True)
            

            if lca_activity_modification:
                reeds_lci_modifier(db_new,modification_inventory_filename,process_name_bridge,emission_name_bridge,location_name_bridge,bw)
                print('Background Activity modified and saved success',flush=True)

       
        
    run_filename = inventory_filename
    r = ''
    
    if premise_editor:
        editor(database_new,base_database,base_project,project_new,bw)

    reeds_editor(database_new,r,run_filename,project_new,create_new_database)
    #bw.projects.purge_deleted_directories()

