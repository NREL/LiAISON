import secrets
import time
from reeds_ecoinvent_updater.lci_creator import reeds_db_editor
from premise import *
from premise_gwp import add_premise_gwp
import pandas as pd


def reset_project(base_project,project_new,bw):
    
    """
    This function copies the project directory of a certain year and scenario, for example
    ecoinvent RCP 19 2030 and creates a copy of the project using a non repeatable name
    using 


    Parameters
    ----------
    db: str
        database name for scenario and year
    
    number : str
        random number generated by uuid to create no duplicate databases
    
    project : str 
        generic project name
        
    bw : module
        brightway2 module loaded shortcut name
        

    
    Returns
    -------
    project name : str
        Name of the project
    """

    project_name = project_new
    try:
      bw.projects.delete_project(project_name,delete_dir = True)
      print(project_name,' Project deleted',flush=True)
    except:
      print(project_name,' Project does not exist',flush=True)
      pass
    print('Setting base project as current for copying - ', base_project,flush=True)
    bw.projects.set_current(base_project)
    try:
        bw.projects.copy_project(project_name,switch = False)
        print(base_project+' project copied successfully',flush=True)
    except:
        bw.projects.purge_deleted_directories()
        bw.projects.copy_project(project_name,switch = False)
        print(base_project+'_project copied successfully after directory deleted',flush=True)    
    

    bw.projects.set_current(project_name)
    print("Entered project " + project_name,flush = True)
    print("Databases in this project are",flush = True)
    print(bw.databases,flush = True) 

def editor(updated_database,base_database,base_project,updated_project_name,bw):
    #Main editor functions that actually calls the functions for reading IMAGE files,
    #IMAGE DATA from posterity and updating the ecoinvent databases. 
    #it stores the updated databases in dictionary files
 
        #reset_project(base_database,base_project,updated_project_name,bw)   
        bw.projects.set_current(base_project)

        try:
            del bw.databases[updated_database]
            print('Deleted database:, ',updated_database)
        except:
            print('No database to delete')

        time0 = time.time()
        key=updated_database
        #Name of old database and new database is same in liaison-reeds
        time1 = time.time()
        ndb = NewDatabase(
            scenarios=[
                {"model":"image", "pathway":"SSP2-Base", "year":2020}
            ],
            source_db=base_database, # <-- name of the database in the BW2 project. Must be a string.
            source_version="3.8", # <-- version of ecoinvent. Can be "3.5", "3.6", "3.7" or "3.7.1". Must be a string.
            key='tUePmX_S5B8ieZkkM7WUU2CnO8SmShwmAeWK9x2rTFo=',
            use_multiprocessing = False # <-- decryption key
            # to be requested from the library maintainers if you want ot use default scenarios included in `premise`
        )
        print(time.time() - time1, flush = True)
        print('new database created, updating now', flush = True)

        time1 = time.time()
        ndb.update_all()
        
        print("updated with SSP2-Base" + str(2020), flush = True)
        print(time.time() - time1, flush = True)

        time1 = time.time()
        add_premise_gwp()
        print('Writing to brightway', flush = True)
        ndb.write_db_to_brightway(name=[key])
        print('Sucessfully written database '+ key, flush = True) 
        print(time.time() - time1, flush=True)

            
        print(time.time() - time0)
        print("seconds", flush = True)



def reeds_updater(year_of_study,results_filename,reeds_grid_mix_creator,data_dir,inventory_filename,modification_inventory_filename,modification_inventory_filename_us,premise_editor,base_database,base_project,database_new,project_new,bw):

    """
    This function defines the result arrays and then calls monte carlo analysis if required or just runs the 
    LCIA run once for analysis. 


    Parameters
    ----------
    year_of_study: str
        project name as provided by user        
    
    results_filename : str
        filename for the result         

    lca_flag : boolean 
        boolean for Life cycle analysis to operate
        
    primary_process : str
       the process under LCA study  

    location_under_study : str
        location of the process under stidy

    eco_d : str
       database name for scenario and year
        
    mc_runs : int
       number of monte carlo runs       
        
    inventory_filename : str
        filename for the process foreground inventory  

    modification_inventory_filename: str
        filename for the process inventory that will be modified inside ecoinvent   

    modification_inventory_filename_us: str
         filename for the process inventory that will be modified inside ecoinvent US  
  
    output_dir : str
       output directory for saving results       
    
    bw: module
       brightway2 module

    Returns
    -------
    None
    """


    # remove all uncertainty from the background with this command'
    # remove_background_uncertainty(db) 
    def reeds_editor(db_new,r,run_filename,project_new):

            """
            This function defines the result arrays and then calls monte carlo analysis if required or just runs the 
            LCIA run once for analysis. 
    
    
            Parameters
            ----------
            db : 
                ecoinvent database name under study with scenario and year        
            
            r : str
                blank for normal runs or numerical for monte carlo simulation number          
    
            Returns
            -------
            None
            """
            print("Staring editing LCI using ReEDS", flush=True)     
            
            
            
            if reeds_grid_mix_creator:

                # Creates the individual state grid mix and also the market flows for stage grid mix with transmission
                
                print('Creating Reeds Grid mix inside ecoinvent')               
                reeds_db_editor(db_new,run_filename,bw)                   
                print('ReEDS LCI electricity generation created within ecoinvent',flush=True)
                state_df = pd.read_csv(run_filename)
                states = list(pd.unique(state_df['process_location']))
                print('Creating market mixes for electricity grid for the states',flush=True)
                for st in states:
                    if st != "US":
                        temp_df = pd.read_csv(modification_inventory_filename)
                        temp_df['process_location'] = "US-"+st
                        temp_df['supplying_location'] = st
                        temp_df.to_csv(modification_inventory_filename, index = False)
                        reeds_db_editor(db_new,modification_inventory_filename,bw)

                # Creates the US grid mix flow and the market flow. 
                # market group for electricity, USA is produced by PREMISE
                # Premise makes market group for electricity high voltage, US to connect to market group for electricity high voltage, USA. 
                # ReEDS_US_Grid_mix is the flow created by LiAISON - ReEDS 
                # We replace the market group for electricity high voltage, USA with ReEDS_US_Grid_mix. 
                # Transmission gets included in the downstream processes, market group for electricity medium/low voltage, US

                print('Creating market mixes for electricity grid for the US grid mix',flush=True)
                reeds_db_editor(db_new,modification_inventory_filename_us,bw)
                print('Background activity modified and saved success',flush=True)



       
        
    run_filename = inventory_filename
    r = ''
    
    if premise_editor:
        editor(database_new,base_database,base_project,project_new,bw)

    reset_project(base_project,project_new,bw)
    reeds_editor(database_new,r,run_filename,project_new)
    #bw.projects.purge_deleted_directories()

