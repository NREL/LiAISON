import sys
import os
import time
from pprint import pprint
from typing import Any, Union
import pandas as pd
import numpy as np
import secrets
from liaison.montecarloforeground import mc_foreground
from liaison.lca_calculator_automated import (
    brightway,
    run_lcia_traci,
    run_lcia_recipe,
    run_lcia_premise_gwp,
)
from liaison.lca_modifier import brightway_modifier
from premise_gwp import add_premise_gwp

def correct_natural_land_transformation(bw: Any) -> None:
    """
    Corrects the natural land transformation method in the Brightway2 database.
    Removes flows not related to specific land types in a whitelist.

    Parameters:
    -----------
    bw : module
        Brightway2 module loaded as a shortcut name.
    """
    lt_methods = [m for m in bw.methods if "natural land transformation" in m[1]]
    white_list = ["forest", "gassland, natural", "sea", "ocean", "inland waterbody", "lake, natural",
                  "river, natural", "seabed, natural", "shrub land", "snow", "unspecified", "wetland", "bare area"]
    l_flows = [cf for lt_method in lt_methods for cf in bw.Method(lt_method).load() if any(n in bw.get_activity(cf[0])["name"] for n in white_list)]
    for lt_method in lt_methods:
        bw.Method(lt_method).write(l_flows)

def correct_bigcc_copper_use(bw: Any, db: str) -> None:
    """
    Corrects the copper use in the BIGCC power plant construction exchange.
    Modifies the amount to a specific value.

    Parameters:
    -----------
    bw : module
        Brightway2 module loaded as a shortcut name.
    db : str
        Name of the database for the scenario and year.
    """
    list_dbs = [db]
    list_acts = [
        "electricity production, at BIGCC power plant, no CCS",
        "electricity production, at BIGCC power plant, pre, pipeline 200km, storage 1000m",
        "electricity production, at BIGCC power plant, pre, pipeline 400km, storage 3000m",
    ]
    for db_name in list_dbs:
        for ds in bw.Database(db_name):
            if ds["name"] in list_acts:
                for exc in ds.exchanges():
                    if exc["name"] == "Construction, BIGCC power plant 450MW":
                        exc["amount"] = 1.01e-11
                        exc.save()

def reset_project(updated_project_name: str, number: str, project: str, updated_database: str, bw: Any) -> str:
    """
    Copies the project directory of a certain year and scenario, creates a copy with a non-repeatable name.
    Deletes existing projects if they exist, then copies the project and sets it as the current project.

    Parameters:
    -----------
    updated_project_name : str
        Updated project name for creating a non-repeatable project.
    number : str
        Random number generated by UUID to create a non-duplicate project.
    project : str
        Generic project name.
    updated_database : str
        Database name for the scenario and year.
    bw : module
        Brightway2 module loaded as a shortcut name.

    Returns:
    --------
    project_name : str
        Name of the created project.
    """
    project_name = f"{project}{updated_project_name}{number}"
    try:
        bw.projects.delete_project(project_name, delete_dir=True)
        pprint('Project deleted')
    except:
        pprint('Project does not exist')

    bw.projects.set_current(updated_project_name)
    pprint(f"Entered project {updated_project_name}")
    pprint("Databases in this project are")
    pprint(bw.databases, width=1)

    try:
        bw.projects.copy_project(project_name, switch=False)
        pprint('Project copied successfully')
    except:
        bw.projects.purge_deleted_directories()
        bw.projects.copy_project(project_name, switch=False)
        pprint('Project copied successfully after directory deleted')

    bw.projects.set_current(project_name)
    pprint(f"Current new project {project_name}")
    pprint("Databases in this project are")
    pprint(bw.databases, width=1)

    pprint('Correcting Natural Land Transformation Recipe method')
    correct_natural_land_transformation(bw)
    pprint('Correcting BIG CC copper use')
    correct_bigcc_copper_use(bw, updated_database)
    add_premise_gwp()
    return project_name

def main_run(lca_project: str, updated_project_name: str, initial_year: int, results_filename: str,
             mc_foreground_flag: bool, lca_flag: bool, lca_activity_modification: bool,
             regional_sensitivity_flag: bool, region: str, data_dir: str, primary_process: str,
             process_under_study: str, location_under_study: str, functional_unit: str, updated_database: str, mc_runs: int,
             inventory_filename: str, modification_inventory_filename: str, process_name_bridge: str,
             emission_name_bridge: str, location_name_bridge: str, output_dir: str, bw: Any) -> None:
    """
    Defines the result arrays and then calls monte carlo analysis if required or just runs the LCIA run once for analysis.

    Parameters:
    -----------
    lca_project : str
        Project name as provided by the user.
    updated_project_name : str
        Updated project name for creating a non-repeatable project.
    initial_year : int
        Initial year for the scenario.
    results_filename : str
        Filename for the result.
    mc_foreground_flag : bool
        Boolean for Monte Carlo simulation to operate.
    lca_flag : bool
        Boolean for Life Cycle Analysis to operate.
    lca_activity_modification : bool
        Boolean for modifying LCA activity.
    regional_sensitivity_flag : bool
        Boolean for regional sensitivity analysis.
    region : str
        Region of the process under study.
    data_dir : str
        Directory for data storage.
    primary_process : str
        The process under LCA study.
    process_under_study : str
        The process under study for LCIA.
    location_under_study : str
        Location of the process under study.
    functional_unit :str
        Functional unit value for LCA calculations. Will be converted to float
    updated_database : str
        Database name for the scenario and year.
    mc_runs : int
        Number of Monte Carlo runs.
    inventory_filename : str
        Filename for the process foreground inventory.
    modification_inventory_filename : str
        Filename for the process inventory that will be modified inside ecoinvent.
    process_name_bridge : str
        Filename for the link between common process names and ecoinvent process names.
    emission_name_bridge : str
        Filename for the link between common emission names and ecoinvent emission names.
    location_name_bridge : str
        Filename for the link between common location names and ecoinvent location names.
    output_dir : str
        Output directory for saving results.
    bw : module
        Brightway2 module loaded as a shortcut name.
    """
    pprint("Starting LCA runs")
    pprint('\n')

    yr = updated_database[10:14]
    scenario = updated_database[15:]
    number = str(secrets.token_hex(8))
    process_under_study = process_under_study.lower()
    location_under_study = location_under_study.lower()



    def lca_runner(db: str, updated_project_name: str, lca_project : str, number: str, r: str, mc_runs: int, mc_foreground_flag: bool, lca_flag: bool, lca_activity_modification: bool, bw: Any) -> None:
            """
            Defines the result arrays and then calls monte carlo analysis if required or just runs the LCIA run once for analysis.

            Parameters:
            -----------
            db : str
                Ecoinvent database name under study with scenario and year.
            updated_project_name : str
                Updated project name for creating a non-repeatable project.
            number : str
                Random number generated by UUID to create a non-duplicate project.
            r : str
                Blank for normal runs or numerical for Monte Carlo simulation number.
            mc_runs : int
                Number of Monte Carlo runs.
            mc_foreground_flag : bool
                Boolean for Monte Carlo simulation to operate.
            lca_flag : bool
                Boolean for Life Cycle Analysis to operate.
            lca_activity_modification: bool
                Boolean for modifying LCA activity.
            bw : module
                Brightway2 module loaded as a shortcut name.
            """
            project_name = reset_project(updated_project_name, number, lca_project, db, bw)

            if lca_activity_modification:
                dictionary_modified = brightway_modifier(db, modification_inventory_filename, mc_foreground_flag, mc_runs,
                                                         process_name_bridge, emission_name_bridge, location_name_bridge, bw)
                pprint('Activity modified and saved success')

            dictionary = brightway(db, run_filename, mc_foreground_flag, mc_runs, process_name_bridge,
                                   emission_name_bridge, location_name_bridge, bw)

            pprint('Activity created and saved success')

            if lca_flag:

                lcia_result = {}
                lcia_df = pd.DataFrame()
                lcia = []
                value = []
                unit = []
                year = []
                method = []

                result_dir1, n_lcias1 = run_lcia_traci(db, dictionary[process_under_study+'@'+location_under_study], float(functional_unit),
                                                       mc_foreground_flag, mc_runs, bw)
                result_dir2, n_lcias2 = run_lcia_recipe(db, dictionary[process_under_study+'@'+location_under_study], float(functional_unit),
                                                        mc_foreground_flag, mc_runs, bw)
                result_dir3, n_lcias3 = run_lcia_premise_gwp(db, dictionary[process_under_study+'@'+location_under_study], float(functional_unit),
                                                       mc_foreground_flag, mc_runs, bw)

                temp1 = pd.DataFrame.from_dict(result_dir1, orient='index')
                temp2 = pd.DataFrame.from_dict(result_dir2, orient='index')
                temp3 = pd.DataFrame.from_dict(result_dir3, orient='index')
                for count, temp in enumerate([temp1, temp2, temp3], start=1):
                    monteC = False
                    if monteC:  # not implemented
                        mc_runs = temp['result'][0][count][1]
                        for mc in mc_runs:
                            lcia.append(temp['result'][0][count][0])
                            value.append(mc)
                            unit.append(temp['result'][0][count][2])
                            year.append(db)
                            method.append('TRACI2.1')
                    else:
                        res_list = temp['result'][0]
                        for element in res_list:
                            lcia.append(element[0])
                            value.append(element[1])
                            unit.append(element[2])
                            year.append(db)
                            method.append('TRACI2.1' if count == 1 else 'RECIPE' if count == 2 else 'IPCC 2013')

                lcia_df = pd.DataFrame({
                    'lcia': lcia,
                    'value': value,
                    'unit': unit,
                    'year': year,
                    'method': method
                })

                lcia_df.to_csv(output_dir+results_filename+str(r)+db+primary_process+'.csv', index=False)

                save_project = False
                if save_project:
                    time0 = time.time()
                    try:
                        import bw2io
                        bw2io.backup.backup_project_directory(project_name)
                        pprint(bw2io.backup.backup_project_directory(project_name))
                        pprint('saved successfully')
                        pprint('Time taken for saving project' + str(time.time() - time0))
                    except:
                        pprint('failed to backup project')

    if mc_foreground_flag:
        mc_foreground(yr, mc_runs, mc_foreground_flag, inventory_filename, output_dir)
        for r in range(0, mc_runs):
            run_filename = output_dir+'/foreground_uncertainty_lci'+str(r)+'_'+str(yr)+'.csv'
            lca_runner(updated_database, updated_project_name, lca_project,number, r, mc_runs, mc_foreground_flag, lca_flag, lca_activity_modification, bw)
    elif regional_sensitivity_flag:
        file = pd.read_csv(inventory_filename)
        file['process_location'] = region
        file['supplying_location'] = region
        pprint('Regional Sensitivity analysis starts')
        run_filename = os.path.join(data_dir, 'sensitivity_regional'+updated_database+str(yr)+'.csv')
        file.to_csv(run_filename, index=False)
        r = ''
        lca_runner(updated_database, updated_project_name, lca_project, number, r, mc_runs, mc_foreground_flag, lca_flag, lca_activity_modification, bw)
    else:
        run_filename = inventory_filename
        r = ''
        lca_runner(updated_database, updated_project_name, lca_project, number,r, mc_runs, mc_foreground_flag, lca_flag, lca_activity_modification, bw)

    try:
        bw.projects.delete_project(bw.projects.current, delete_dir=True) 
        print('LCA project with activity Deleted succesfully. To prevent deletion comment out lines 374 in liaison_model.py')
        bw.projects.purge_deleted_directories()
    except:
        pprint('There was an issue with deletion')
